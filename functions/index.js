const { Telegraf, Markup } = require('telegraf');
require('dotenv').config();

const { bot, handleWebhook } = require('./webhookHandler');

const {
    greetingHandler,
    catalogHandler,
    datesPriceHandler,
    faqHandler
} = require('./greeting');

const {
    enterHandler,
    paymentTermsHandler,
    infoHandler,
    bookingHandler,
    datesHandler,
    faqHandler2
} = require('./booking');

const { 
    excurses, 
    tours 
} = require('./catalog');


exports.handler = async (event, context) => { return handleWebhook(event, context); };   //* –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook

//! –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∏ —Å—Ç–∞—Ä—Ç
bot.start(greetingHandler);

// bot.hears(['üîô –ù–∞–∑–∞–¥', 'üìÖ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'], greetingHandler);
// bot.hears('üìö –ö–∞—Ç–∞–ª–æ–≥ –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', catalogHandler);
// bot.hears('üóì –î–∞—Ç—ã –∏ —Ü–µ–Ω—ã', datesPriceHandler);
// bot.hears('üí¨ –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã', faqHandler);
// bot.hears('üåü –≠–∫—Å–∫—É—Ä—Å–∏–∏ –Ω–∞ 1 –¥–µ–Ω—å', excurses);
// bot.hears('‚ú® –ú–Ω–æ–≥–æ–¥–Ω–µ–≤–Ω—ã–µ —Ç—É—Ä—ã', tours);
// bot.hears('‚¨Ö –ù–∞–∑–∞–¥', enterHandler);
// bot.hears('üí∞ –£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', paymentTermsHandler);
// bot.hears('üìå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—É—Ä–µ', infoHandler);
// bot.hears('üñã –î–∞—Ç—ã —Ç—É—Ä–æ–≤', datesHandler);
// bot.hears('üí∞ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å', bookingHandler);
// bot.hears('‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã', faqHandler2);

//* –û–±—ä–µ–∫—Ç —Å —Ç–µ–∫—Å—Ç–∞–º–∏ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
const triggers = {
    // 'üîô –ù–∞–∑–∞–¥': greetingHandler,
    // 'üìÖ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é': greetingHandler,
    'üîô –ù–∞–∑–∞–¥, üìÖ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é': 'greetingHandler',
    'üìö –ö–∞—Ç–∞–ª–æ–≥ –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ': catalogHandler,
    'üóì –î–∞—Ç—ã –∏ —Ü–µ–Ω—ã': datesPriceHandler,
    'üí¨ –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã': faqHandler,
    'üåü –≠–∫—Å–∫—É—Ä—Å–∏–∏ –Ω–∞ 1 –¥–µ–Ω—å': excurses,
    '‚ú® –ú–Ω–æ–≥–æ–¥–Ω–µ–≤–Ω—ã–µ —Ç—É—Ä—ã': tours,
    '‚¨Ö –ù–∞–∑–∞–¥': enterHandler,
    'üí∞ –£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ': paymentTermsHandler,
    'üìå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—É—Ä–µ': infoHandler,
    'üñã –î–∞—Ç—ã —Ç—É—Ä–æ–≤': datesHandler,
    'üí∞ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å': bookingHandler,
    '‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã': faqHandler2
};

//* –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å –ø–æ–º–æ—â—å—é —Ü–∏–∫–ª–∞
for (const [text, handler] of Object.entries(triggers)) {
    bot.hears(text, handler);
}

bot.action('tour', enterHandler);

//! –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥
bot.telegram.setMyCommands([
    { command: 'start', description: '–í –Ω–∞—á–∞–ª–æ' },
    { command: 'catalog', description: '–ö–∞—Ç–∞–ª–æ–≥' },
    { command: 'faq', description: '–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã' }
]);


//! –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {
    try {
        const text = ctx.message.text.trim().toLowerCase();
        console.log('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', text);
    //?Regular expressions (—Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è)
        if (/–ø—Ä–∏–≤–µ—Ç/i.test(text) || /–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π/i.test(text)) {
            await greetingHandler(ctx);}
        else if (/–¥–∞—Ç/i.test(text) || /—Ü–µ–Ω/i.test(text)) {
            await datesPriceHandler(ctx);}
        else if (/–∫–∞—Ç–∞–ª–æ–≥/i.test(text) || /—Ç—É—Ä/i.test(text)) {
            await catalogHandler(ctx);}
        else if (/–≤–æ–ø—Ä–æ—Å/i.test(text) || /—Å–ø—Ä–æ—Å–∏—Ç—å/i.test(text)) {
            await faqHandler(ctx);}
        else {
            await ctx.reply('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!\n –ú—ã —É–∂–µ –∑–∞–Ω–∏–º–∞–µ–º—Å—è –≤–∞—à–∏–º –∑–∞–ø—Ä–æ—Å–æ–º –∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.üòä\n\n–ü–æ–∫–∞ –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –¥–æ–∂–¥–∞—Ç—å—Å—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
});