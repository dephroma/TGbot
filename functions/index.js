const { Telegraf, Markup } = require('telegraf');
require('dotenv').config();

const {
    // greetingHandler,
    catalogHandler,
    datesPriceHandler
    // faqHandler
} = require('./greeting');
// const {
//     enterHandler,
//     paymentTermsHandler,
//     infoHandler,
//     bookingHandler,
//     datesHandler,
//     faqHandler2
// } = require('./booking');
// const { carousel1 } = require('./carousel1');
// const { carousel2 } = require('./carousel2');

const BOT_TOKEN = process.env.BOT_TOKEN;
const bot = new Telegraf(BOT_TOKEN);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
bot.start((ctx) => {
    // ctx.reply('–û–±–Ω–æ–≤–ª—è—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É...', Markup.removeKeyboard()); // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤—É
    ctx.replyWithPhoto('https://vk.com/photo-226855768_457239045', {
        caption: '–°–∞–ª–∞–º –∞–ª–µ–π–∫—É–º, –¥–æ—Ä–æ–≥–æ–π –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫!üëã\n\n–Ø ‚Äî –¢–∏–º—É—Ä (–æ—Ç —Ç—é—Ä–∫. "–∂–µ–ª–µ–∑–æ"), –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –≥–∏–¥.ü§ñ\n' +
            '–ü–æ–º–æ–≥—É –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–π —Ç—É—Ä, –æ—Ç–≤–µ—á—É –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ñ–æ—Ä–º–ª—é –∑–∞—è–≤–∫—É.\n\n–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?',
        reply_markup: Markup.keyboard([
            ['üìö –ö–∞—Ç–∞–ª–æ–≥ –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ'],
            ['üóì –î–∞—Ç—ã –∏ —Ü–µ–Ω—ã'],
            ['üí¨ –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã']
        ]).resize()
    });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
bot.hears('–ü—Ä–∏–≤–µ—Ç', '/start', greetingHandler);
bot.hears('üìö –ö–∞—Ç–∞–ª–æ–≥ –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', catalogHandler);
bot.hears('üóì –î–∞—Ç—ã –∏ —Ü–µ–Ω—ã', datesPriceHandler);
// bot.hears('üí¨ –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã', faqHandler);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
// bot.on('text', async (ctx) => {
//     try {
//         const text = ctx.message.text.trim().toLowerCase();
//         console.log('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', text);

//         if (text === 'üìö –∫–∞—Ç–∞–ª–æ–≥ –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ') {
//             await catalogHandler(ctx);
//         } else if (text === 'üåü —ç–∫—Å–∫—É—Ä—Å–∏–∏ –Ω–∞ 1 –¥–µ–Ω—å') {
//             await carousel1(ctx);
//         } else if (text === '‚ú® –º–Ω–æ–≥–æ–¥–Ω–µ–≤–Ω—ã–µ —Ç—É—Ä—ã') {
//             await carousel2(ctx);
//         } else if (text === 'üóì –¥–∞—Ç—ã –∏ —Ü–µ–Ω—ã') {
//             await datesPriceHandler(ctx);
//         } else if (text === 'üí¨ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã') {
//             await faqHandler(ctx);
//         } else if (['–∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ', '‚¨ÖÔ∏è –Ω–∞–∑–∞–¥', 'üõ° –ø–µ—Ä–µ–π—Ç–∏ –∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é'].includes(text)) {
//             await enterHandler(ctx);
//         } else if (text === 'üí∞ —É—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ') {
//             await paymentTermsHandler(ctx);
//         } else if (text === 'üìå –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—É—Ä–µ') {
//             await infoHandler(ctx);
//         } else if (text === 'üíµ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å') {
//             await bookingHandler(ctx);
//         } else if (text === 'üìÖ –¥–∞—Ç—ã —Ç—É—Ä–æ–≤') {
//             await datesHandler(ctx);
//         } else if (text === '‚ùì —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã') {
//             await faqHandler2(ctx);
//         } else {
//             await ctx.reply('–Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é –∏–ª–∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
//         }
//     } catch (error) {
//         console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
//     }
// });

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è webhook
exports.handler = async (event, context) => {
    const body = JSON.parse(event.body);  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    try {
        console.log('Received webhook event:', body);  // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        await bot.handleUpdate(body);  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegraf
        return {
            statusCode: 200,
            body: JSON.stringify({ message: "Webhook processed successfully" })
        };
    } catch (error) {
        console.error('Error handling webhook:', error);  // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        return {
            statusCode: 500,
            body: JSON.stringify({ message: 'Error handling webhook' })
        };
    }
};
