const { Telegraf, Markup } = require('telegraf');
require('dotenv').config();

const BOT_TOKEN = process.env.BOT_TOKEN;
const bot = new Telegraf(BOT_TOKEN);

const {
    greetingHandler,
    catalogHandler,
    datesPriceHandler,
    faqHandler
} = require('./greeting');

const {
    enterHandler,
    paymentTermsHandler,
    infoHandler,
    bookingHandler,
    datesHandler,
    faqHandler2
} = require('./booking');

const { 
    excurses, 
    tours 
} = require('./catalog');

const { handleWebhook } = require('./webhookHandler');

exports.handler = async (event, context) => { return handleWebhook(event, context); };

//! –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∏ —Å—Ç–∞—Ä—Ç
bot.start(greetingHandler);

bot.hears(['üîô –ù–∞–∑–∞–¥','–ø—Ä–∏–≤–µ—Ç', 'üìÖ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'], greetingHandler);
bot.hears('üìö –ö–∞—Ç–∞–ª–æ–≥ –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', catalogHandler);
bot.hears('üóì –î–∞—Ç—ã –∏ —Ü–µ–Ω—ã', datesPriceHandler);
bot.hears('üí¨ –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã', faqHandler);
bot.hears('üåü –≠–∫—Å–∫—É—Ä—Å–∏–∏ –Ω–∞ 1 –¥–µ–Ω—å', excurses);
bot.hears('‚ú® –ú–Ω–æ–≥–æ–¥–Ω–µ–≤–Ω—ã–µ —Ç—É—Ä—ã', tours);
bot.hears('‚¨Ö –ù–∞–∑–∞–¥', enterHandler);
bot.hears('üí∞ –£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', paymentTermsHandler);
bot.hears('üìå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—É—Ä–µ', infoHandler);
bot.hears('üñã –î–∞—Ç—ã —Ç—É—Ä–æ–≤', datesHandler);
bot.hears('üí∞ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å', bookingHandler);
bot.hears('‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã', faqHandler2);
bot.action('tour', enterHandler);

//! –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {
    try {
        const text = ctx.message.text.trim().toLowerCase();
        console.log('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', text);
        
         if (/–¥–∞—Ç/i.test(text) || /—Ü–µ–Ω/i.test(text)) {   //*Regular expressions
            await datesPriceHandler(ctx);}
         else if (/–∫–∞—Ç–∞–ª–æ–≥/i.test(text) || /—Ç—É—Ä/i.test(text)) {
            await catalogHandler(ctx);}
        else if (/–≤–æ–ø—Ä–æ—Å/i.test(text) || /—Å–ø—Ä–æ—Å–∏—Ç—å/i.test(text)) {
            await faqHandler(ctx);}
        else {
            await ctx.reply('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!\n –ú—ã —É–∂–µ –∑–∞–Ω–∏–º–∞–µ–º—Å—è –≤–∞—à–∏–º –∑–∞–ø—Ä–æ—Å–æ–º –∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.üòä\n\n–ü–æ–∫–∞ –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –¥–æ–∂–¥–∞—Ç—å—Å—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
});

// exports.handler = async (event, context) => {
//     return handleWebhook(event); };
//! –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è webhook
exports.handler = async (event, context) => {
    const body = JSON.parse(event.body);  //* –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    try {
        console.log('Received webhook event:', body);  //* –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        await bot.handleUpdate(body);  //* –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegraf
        return {
            statusCode: 200,
            body: JSON.stringify({ message: "Webhook processed successfully" })
        };
    } catch (error) {
        console.error('Error handling webhook:', error);  //* –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        return {
            statusCode: 500,
            body: JSON.stringify({ message: 'Error handling webhook' })
        };
    }
};
